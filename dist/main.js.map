{"mappings":"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","sources":["Documents/Projects/pay-on-integrator/src/index.js"],"sourcesContent":["import fetch from 'node-fetch'\r\n/**\r\n * main object to handle most of the operations\r\n */\r\nconst integrator = {\r\n  /**\r\n   * Submits the data to the appropriate endpoint depending on the integrationType provided by the user.\r\n   *\r\n   * \"CopyAndPay\" - Returns a checkout ID that you will need to call the widget.\r\n   * \"ServerToServer\" - Support synchronous transactions only, does not autodirect to URL from the intermediate response.\r\n   * \"threeDSecure\" - Standalone 3D Secure transaction request, only returns intermediate response, does not auto-redirect.\r\n   * \"TokenizeStandAlone\" - Submits data for standalone tokenization in the gateway.\r\n   * \"Manage\" - Submits against existing transaction to Refund, Capture, Reverse, or, Receipt.\r\n   * \"Recurring\" - Used for subscription type services, use against a registration ID.\r\n   *\r\n   * @param {string} integrationType The type of integration you want to send the request to. Available options are: [\"CopyAndPay\", \"ServerToServer\", \"threeDSecure\", \"TokenizeStandAlone\", \"Manage\", \"Recurring\"].\r\n   * @param {string} accessToken Your API token.\r\n   * @param {string} parameters Your parameters, must be in query string parameters format.\r\n   * @param {string} referenceId Used for transactions that requires a reference ID (usually a registration ID or a previously approved transaction ID). Defaults as blank.\r\n   * @param {boolean} isTestMode Determines if you want to hit the test or live environment, defaults to TRUE\r\n   *\r\n   * @returns Promise JSON response object. Needs to be fullfilled.\r\n   */\r\n  submitTransactionRequest: async (\r\n    integrationType,\r\n    accessToken,\r\n    parameters,\r\n    referenceId = '',\r\n    isTestMode = true\r\n  ) => {\r\n    // init URL endpoint\r\n    let endPoint = ''\r\n    switch (integrationType) {\r\n      case 'CopyAndPay':\r\n        endPoint = `https://${setSubDomain(isTestMode)}.oppwa.com/v1/checkouts`\r\n        break\r\n      case 'ServerToServer':\r\n        endPoint = `https://${setSubDomain(isTestMode)}.oppwa.com/v1/payments`\r\n        break\r\n      case 'threeDSecure':\r\n        endPoint = `https://${setSubDomain(\r\n          isTestMode\r\n        )}.oppwa.com/v1/threeDSecure`\r\n        break\r\n      case 'TokenizeStandAlone':\r\n        endPoint = `https://${setSubDomain(\r\n          isTestMode\r\n        )}.oppwa.com/v1/registrations`\r\n        break\r\n      case 'Manage':\r\n        // eval if user passed a referenceId\r\n        if (referenceId == '') {\r\n          let error = `\"referenceId\" is required for Integration Type \"Manage\".`\r\n          console.error(error)\r\n\r\n          return error\r\n        } else {\r\n          endPoint = `https://${setSubDomain(\r\n            isTestMode\r\n          )}.oppwa.com/v1/payments/${referenceId}`\r\n        }\r\n        break\r\n\r\n      case 'Recurring':\r\n        // eval if user passed a referenceId\r\n        if (referenceId == '') {\r\n          let error = `\"referenceId\" is required for Integration Type \"Recurring\".`\r\n          console.error(error)\r\n\r\n          return error\r\n        } else {\r\n          endPoint = `https://${setSubDomain(\r\n            isTestMode\r\n          )}.oppwa.com/v1/registrations/${referenceId}/payments`\r\n        }\r\n        break\r\n\r\n      // display error to user in case type is not within scope\r\n      default:\r\n        let error = `The Integration Type \"${integrationType}\" is not recognized. Please choose only from the following: [\"CopyAndPay\", \"ServerToServer\", \"threeDSecure\", \"TokenizeStandAlone\", \"Manage\"]`\r\n\r\n        console.error(error)\r\n        return error\r\n    }\r\n\r\n    // le fetch\r\n    const rawResponse = await fetch(endPoint, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n      body: parameters,\r\n    })\r\n\r\n    // return response, to be fullfilled\r\n    return await rawResponse.json()\r\n  },\r\n\r\n  /**\r\n   * Fetches the transaction result depending on the type of reference ID\r\n   * @param {string} accessToken Your API token.\r\n   * @param {string} entityId Your assigned entity ID provided by your service provider.\r\n   * @param {string} id The generated checkout ID returned from submitting the initial request.\r\n   * @param {string} idType The type of id you provided. Choices are: [\"checkoutId\", \"paymentId\", \"merchantTransactionId\"]\r\n   * @param {boolean} isTestMode Determines if you want to hit the test or live environment. Defaults to true.\r\n   * @returns Promise JSON response object. Needs to be fullfilled.\r\n   */\r\n  getPaymentStatus: async (\r\n    accessToken,\r\n    entityId,\r\n    id,\r\n    idType,\r\n    isTestMode = true\r\n  ) => {\r\n    // init endPoint URL\r\n    let endPoint = ''\r\n    switch (idType) {\r\n      case 'checkoutId':\r\n        endPoint = `https://${setSubDomain(\r\n          isTestMode\r\n        )}.oppwa.com/v1/checkouts/${id}/payment?entityId=${entityId}`\r\n        break\r\n\r\n      case 'paymentId':\r\n        endPoint = `https://${setSubDomain(\r\n          isTestMode\r\n        )}.oppwa.com/v1/query/${id}?entityId=${entityId}`\r\n        break\r\n\r\n      case 'merchantTransactionId':\r\n        endPoint = `https://${setSubDomain(\r\n          isTestMode\r\n        )}.oppwa.com/v1/query?entityId=${entityId}&merchantTransactionId=${id}`\r\n        break\r\n\r\n      // error handling for unsupported id type\r\n      default:\r\n        let error = `ID Type \"${idType}\" is not recognized. Please choose from [\"checkoutId\", \"paymentId\", \"merchantTransactionId\"] only.`\r\n        console.error(error)\r\n\r\n        return error\r\n    }\r\n\r\n    // fetch but GET method this time\r\n    const rawResponse = await fetch(endPoint, {\r\n      method: 'GET',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n\r\n    // return response, to be fullfilled\r\n    return rawResponse.json()\r\n  },\r\n\r\n  /**\r\n   * Deletes an existing registration ID from the API\r\n   * @param {string} accessToken Your API token.\r\n   * @param {string} entityId Your assigned entity ID provided by your service provider.\r\n   * @param {string} registrationID The registration ID that you wish to delete.\r\n   * @param {boolean} isTestMode Determines if you want to hit the test or live environment. Defaults to true.\r\n   * @returns\r\n   */\r\n  deleteRegistration: async (\r\n    accessToken,\r\n    entityId,\r\n    registrationID,\r\n    isTestMode = true\r\n  ) => {\r\n    const endPoint = `https://${setSubDomain(\r\n      isTestMode\r\n    )}.oppwa.com/v1/registrations/${registrationID}?entityId=${entityId}`\r\n\r\n    // fetch but GET method this time\r\n    const rawResponse = await fetch(endPoint, {\r\n      method: 'DELETE',\r\n      headers: {\r\n        'Content-Type': 'application/x-www-form-urlencoded',\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    })\r\n\r\n    // return response, to be fullfilled\r\n    return rawResponse.json()\r\n  },\r\n}\r\n\r\n/**\r\n * Utility function to return subdomain string\r\n * @param {boolean} isTestMode TRUE for test mode, FALSE for live.\r\n * @returns {string} subdomain string\r\n */\r\nconst setSubDomain = (isTestMode) => {\r\n  if (isTestMode) {\r\n    return 'eu-test'\r\n  } else {\r\n    return 'eu-prod'\r\n  }\r\n}\r\n\r\nexport default integrator\r\n"],"names":[],"version":3,"file":"main.js.map"}